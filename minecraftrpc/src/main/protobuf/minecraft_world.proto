syntax = "proto3";
package MinecraftWorld;
option java_package = "com.yplugins.minecraftrpc.proto.world";
option java_multiple_files = true;
option java_outer_classname = "MinecraftRPC";

import "minecraft_types.proto";

service MinecraftWorld {
    rpc getWorldList(WorldListRequest) returns (WorldListResponse);
    rpc getWorld(GetWorldRequest) returns (GetWorldResponse);
    rpc setWeather(SetWeatherRequest) returns (SetWeatherResponse);
}

message CommandStatus {
    CommandStatusCode code = 1;
    string extra = 2;
}

enum CommandStatusCode {
    OK = 0;
    UNKNOWN_ERROR = 1;
    MISSING_ARGUMENT = 2;
    INVALID_ARGUMENT = 3;
    NOT_IMPLEMENTED = 4;
    WORLD_NOT_FOUND = 5;
    WEATHER_CONTROL_FAILED = 6;
    INVALID_WEATHER_STATE = 7;
}

message Dimension {
    string name = 1;
}

// Represents a location within a Minecraft world, including the dimension,
// position, and orientation of an entity.
//
// Fields:
//   dimension    - The dimension in which the location exists (e.g., Overworld, Nether, End, etc.).
//   pos          - The 3D position vector (x, y, z) within the dimension.
//   orientation  - The orientation (rotation) of the entity/block at this location.
message Location {
    Dimension dimension = 1;
    MinecraftTypes.Vec3f pos = 2;
    Orientation orientation = 3;
}

message Orientation {
    float yaw = 1;    // Left/right angle (along y axis) in [-180, 180) with 0 looking south.
    float pitch = 2;  // Up/down angle in [-90, 90] with -90 looking straight up.
}

enum Difficulty {
    PEACEFUL = 0;
    EASY = 1;
    NORMAL = 2;
    HARD = 3;
}

enum WeatherState {
    CLEAR = 0;
    STORM = 1; // Rain or Snow
    THUNDER = 2;
}

/** A Minecraft world */
message World {
    string name = 1; // name of world == folder name (eg. world, world_nether, world_the_end)
    int64 seed = 2; // seed of the world
    WorldInfo info = 3; // information about the world
}

message WorldInfo {
    string key = 1;  // Namespace key of world identifying it ingame (eg. minecraft:overworld, minecraft:the_nether, minecraft:the_end)
    bool isPVP = 2;
    bool isHardcore = 3;
    bool isUltraWarm = 6;
    Difficulty difficulty = 7; // difficulty of the world
    WeatherInfo weatherInfo = 8; // current weather state
}

message GetWorldRequest {
    string name = 1; // namespace of the world folder (eg. world)
}

message GetWorldResponse {
    CommandStatus status = 1;
    World world = 2; // the world requested
}

message WorldListRequest {
    repeated GetWorldRequest filter = 1; // if empty just get all worlds, else set worlds
}

message WorldListResponse {
    CommandStatus status = 1;
    repeated World worlds = 2;
}

// Weather control messages
message WeatherResponse {
    CommandStatus status = 1;
    WeatherInfo weatherInfo = 2;
}

message WeatherInfo {
    WeatherState currentWeather = 1;
    int32 duration = 2; // Duration in ticks
}

message SetWeatherRequest {
    string name = 1;        // Name of the world (eg. world)
    WeatherState weather = 2;    // The desired weather state
    int32 duration = 3;          // Duration in ticks (optional, server will use default if not specified)
}

message SetWeatherResponse {
    CommandStatus status = 1;    // Status of the command
}